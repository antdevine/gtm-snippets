<script>
  
  var cookieValue = '{{affiliateCookie}}';
  cookieValue = cookieValue.toLowerCase();
        var d = new Date();
        d.setTime(d.getTime() + (30*24*60*60*1000));
        var expires = "expires="+d.toUTCString();
        document.cookie = "affiliateOrigin=" + cookieValue + "; " + expires + "; path=/" +";domain=www.prettylittlething.com";
  
</script>







function(){
	if(typeof plt.storeCode !== 'undefined') {
 		return plt.storeCode; 
	}else{
 		return null; 
	}
}




function(){
  if (!window.Mage) {
    var Mage = {};

    Mage.Cookies = {};
    Mage.Cookies.expires  = null;
    Mage.Cookies.path     = '/';
    Mage.Cookies.domain   = null;
    Mage.Cookies.secure   = false;
    Mage.Cookies.set = function(name, value){
         var argv = arguments;
         var argc = arguments.length;
         var expires = (argc > 2) ? argv[2] : Mage.Cookies.expires;
         var path = (argc > 3) ? argv[3] : Mage.Cookies.path;
         var domain = (argc > 4) ? argv[4] : Mage.Cookies.domain;
         var secure = (argc > 5) ? argv[5] : Mage.Cookies.secure;
         document.cookie = name + "=" + escape (value) +
           ((expires == null) ? "" : ("; expires=" + expires.toGMTString())) +
           ((path == null) ? "" : ("; path=" + path)) +
           ((domain == null) ? "" : ("; domain=" + domain)) +
           ((secure == true) ? "; secure" : "");
    };

    Mage.Cookies.get = function(name){
        var arg = name + "=";
        var alen = arg.length;
        var clen = document.cookie.length;
        var i = 0;
        var j = 0;
        while(i < clen){
            j = i + alen;
            if (document.cookie.substring(i, j) == arg)
                return Mage.Cookies.getCookieVal(j);
            i = document.cookie.indexOf(" ", i) + 1;
            if(i == 0)
                break;
        }
        return null;
    };

    Mage.Cookies.clear = function(name) {
      if(Mage.Cookies.get(name)){
        document.cookie = name + "=" +
        "; expires=Thu, 01-Jan-70 00:00:01 GMT";
      }
    };

    Mage.Cookies.getCookieVal = function(offset){
       var endstr = document.cookie.indexOf(";", offset);
       if(endstr == -1){
           endstr = document.cookie.length;
       }
       return unescape(document.cookie.substring(offset, endstr));
    };
  }
  
 return Mage.Cookies.get('affiliateOrigin').toLowerCase(); 
}








function(){
  var customVariable = '{{affiliateCookie}}';
  customVariable = customVariable.toLowerCase();
if((customVariable.indexOf('awin') !== -1)){
      return 'aw';
      }else{
       return 'na';
      }
}








function(){
if (window.location.hostname.includes("prettylittlething.ie")) {
            return 22681;
        } else {
            return 16304;
        }
}






function(){
return (/iPad/.test(navigator.userAgent) ? "t" : (/Mobile|iP(hone|od)|Android|BlackBerry|IEMobile/.test(navigator.userAgent) ? "m" : "d"));
}






function(){
  var prods={{ecom_impressions}};
  
  out=[];
  for(i=0; i<prods.length && i<3; i++){
  out.push(prods[i].id);
  }

return out;

}





function() { 
return {{ProductsPurchased}}.map(function(a) {
return a.name;
}); 
}




function() {
var quantityString = {{Add to bag Array quantity}};
var quantityInt = parseInt(quantityString, 10);
return quantityInt;
}





function() {
 var searchResult = window.location.search;
 var searchResultEdit = searchResult.replace('?q=', '');
  return searchResultEdit;
}





function() { 
return {{ProductsPurchased}}.map(function(a) {
return "{product_name:" + a.name + "," + "product_id:" + a.id + "," + "product_category:" + a.category + "," + "product_price:" + a.price + "}";
}); 
}





function() {
  var formattedItems = {{ProductsPurchased}}.map(function(item){
      var priceInt = parseFloat(item.price.replace(',',''));
      return {
        "unitPriceLessTax": (priceInt/1.2).toFixed(2),
        "unitPrice": priceInt,
        "quantity": item.quantity,
        "SKU": item.id,
        "productName": item.name
      };
  });
  return formattedItems;
}







function(){
  var affiliateOriginCookie = {{AffiliateOrigin}};
var affiliateOriginCookieLC = affiliateOriginCookie.toLowerCase();

if (affiliateOriginCookieLC.indexOf("rakuten") >= 0) { 
return true;
}
else { 
return false;
}
}







function() {
return {{ProductsPurchased}}.map(function(item){
	var price = item.price.replace(',','');
    return {
      item: item.id,
      price: parseFloat(price),
      quantity: item.quantity
    }
});
}







function() {
return {{Product Content ID}}.join("|");
}






function() {
switch ({{pltStoreCode}}) {
  case 'uk':
    return '3b233929-048d-4b79-a672-b37827e7282d';
    break;
  case 'us':
    return 'b972e4de-de58-4ac9-9a3c-d255a815fef9';
    break;
  case 'ie':
     return 'c747b692-60cf-43ee-aacc-654a368133bc';
    break;
  case 'fr':
    return 'cc7cacb8-a27a-438f-9651-81554a9b27e0';
    break;
  case 'au':
    return '74121939-b5b6-4d8b-9339-c063e6f96600';
    break;
}
}






function() { 
return {{ProductsPurchased}}.map(function(a) {
return a.id.toLowerCase().replace(/[^a-z0-9_]+/g, '');
}); 
}






emailhash
function() {
//256 hash email
  var sha256 = function sha256(ascii) {
	function rightRotate(value, amount) {
		return (value>>>amount) | (value<<(32 - amount));
	};
	
	var mathPow = Math.pow;
	var maxWord = mathPow(2, 32);
	var lengthProperty = 'length'
	var i, j; // Used as a counter across the whole file
	var result = ''

	var words = [];
	var asciiBitLength = ascii[lengthProperty]*8;
	
	//* caching results is optional - remove/add slash from front of this line to toggle
	// Initial hash value: first 32 bits of the fractional parts of the square roots of the first 8 primes
	// (we actually calculate the first 64, but extra values are just ignored)
	var hash = sha256.h = sha256.h || [];
	// Round constants: first 32 bits of the fractional parts of the cube roots of the first 64 primes
	var k = sha256.k = sha256.k || [];
	var primeCounter = k[lengthProperty];
	/*/
	var hash = [], k = [];
	var primeCounter = 0;
	//*/

	var isComposite = {};
	for (var candidate = 2; primeCounter < 64; candidate++) {
		if (!isComposite[candidate]) {
			for (i = 0; i < 313; i += candidate) {
				isComposite[i] = candidate;
			}
			hash[primeCounter] = (mathPow(candidate, .5)*maxWord)|0;
			k[primeCounter++] = (mathPow(candidate, 1/3)*maxWord)|0;
		}
	}
	
	ascii += '\x80' // Append Æ‡' bit (plus zero padding)
	while (ascii[lengthProperty]%64 - 56) ascii += '\x00' // More zero padding
	for (i = 0; i < ascii[lengthProperty]; i++) {
		j = ascii.charCodeAt(i);
		if (j>>8) return; // ASCII check: only accept characters in range 0-255
		words[i>>2] |= j << ((3 - i)%4)*8;
	}
	words[words[lengthProperty]] = ((asciiBitLength/maxWord)|0);
	words[words[lengthProperty]] = (asciiBitLength)
	
	// process each chunk
	for (j = 0; j < words[lengthProperty];) {
		var w = words.slice(j, j += 16); // The message is expanded into 64 words as part of the iteration
		var oldHash = hash;
		// This is now the undefinedworking hash", often labelled as variables a...g
		// (we have to truncate as well, otherwise extra entries at the end accumulate
		hash = hash.slice(0, 8);
		
		for (i = 0; i < 64; i++) {
			var i2 = i + j;
			// Expand the message into 64 words
			// Used below if 
			var w15 = w[i - 15], w2 = w[i - 2];

			// Iterate
			var a = hash[0], e = hash[4];
			var temp1 = hash[7]
				+ (rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25)) // S1
				+ ((e&hash[5])^((~e)&hash[6])) // ch
				+ k[i]
				// Expand the message schedule if needed
				+ (w[i] = (i < 16) ? w[i] : (
						w[i - 16]
						+ (rightRotate(w15, 7) ^ rightRotate(w15, 18) ^ (w15>>>3)) // s0
						+ w[i - 7]
						+ (rightRotate(w2, 17) ^ rightRotate(w2, 19) ^ (w2>>>10)) // s1
					)|0
				);
			// This is only used once, so *could* be moved below, but it only saves 4 bytes and makes things unreadble
			var temp2 = (rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22)) // S0
				+ ((a&hash[1])^(a&hash[2])^(hash[1]&hash[2])); // maj
			
			hash = [(temp1 + temp2)|0].concat(hash); // We don't bother trimming off the extra ones, they're harmless as long as we're truncating when we do the slice()
			hash[4] = (hash[4] + temp1)|0;
		}
		
		for (i = 0; i < 8; i++) {
			hash[i] = (hash[i] + oldHash[i])|0;
		}
	}
	
	for (i = 0; i < 8; i++) {
		for (j = 3; j + 1; j--) {
			var b = (hash[i]>>(j*8))&255;
			result += ((b < 16) ? 0 : '') + b.toString(16);
		}
	}
	return result;
};

var output = sha256('{{user.useremailaddress}}');
return output;
}







function() {
  var formattedItems = {{ProductsPurchased}}.map(function(item){
      return item.id + ';' + item.price + '|';
  });
  return formattedItems.join('');
}










function() {
var breadcrumbs = jQuery('.breadcrumb>li a span');
return breadcrumbs[2].innerText;
}







